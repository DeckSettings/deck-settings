name: "Issue Title Updater"

on:
  issues:
    types: [opened, edited]

jobs:
  parse-and-update-issue-title:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: "Set Title from issue body"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue
            const body = issue.body || "";
            const lines = body.split(/\r?\n/);

            function extractHeadingValue(lines, headingRegex) {
              // 1. Find the line index that matches the heading (e.g., "### Game Name").
              const headingIndex = lines.findIndex((line) => headingRegex.test(line));
              if (headingIndex === -1) {
                return null; // The heading was not found at all.
              }

              // 2. Start scanning subsequent lines until we either hit another heading or find a non-empty answer.
              for (let i = headingIndex + 1; i < lines.length; i++) {
                const currentLine = lines[i].trim();

                // If it's empty, keep going to skip blank lines.
                if (!currentLine) {
                  continue;
                }

                // If it starts with "###", we've reached the next heading—stop and return null (no answer).
                if (currentLine.startsWith("###")) {
                  return null;
                }

                // Otherwise, this line should be our answer. Return it, stripped of whitespace.
                return currentLine;
              }

              // If we run out of lines, we didn’t find any valid answer.
              return null;
            }

            // 3) Extract values for Game Name & Target Framerate
            const gameName = extractHeadingValue(lines, /^### Game Name/);
            const targetFramerate = extractHeadingValue(lines, /^### Target Framerate/);

            // 4) Fallback if not found
            const finalGameName = gameName || "Untitled";
            const finalFramerate = targetFramerate || "Unknown";

            // 5) Build title
            const newTitle = `${finalGameName} ( ${finalFramerate} )`;

            // 6) Output
            console.log("Parsed from issue body:");
            console.log(`  Game Name:        ${finalGameName}`);
            console.log(`  Target Framerate: ${finalFramerate}`);
            console.log("\nConstructed Title:");
            console.log(`  ${newTitle}`);

            // Only update if the new title differs from the current
            console.log(`Current issue ${issue.number} title ${issue.title}`)
            if (issue.title !== newTitle) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                title: newTitle
              });
              console.log(`Issue #${issue.number} title updated to: ${newTitle}`);
            } else {
              console.log(`Issue #${issue.number} already has the correct title; skipping update.`);
            }

  parse-and-update-issue-labels:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: "Set Title from issue body"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue
            const body = issue.body || "";
            const lines = body.split(/\r?\n/);

            function extractHeadingValue(lines, headingRegex) {
              // 1. Find the line index that matches the heading (e.g., "### Game Name").
              const headingIndex = lines.findIndex((line) => headingRegex.test(line));
              if (headingIndex === -1) {
                return null; // The heading was not found at all.
              }

              // 2. Start scanning subsequent lines until we either hit another heading or find a non-empty answer.
              for (let i = headingIndex + 1; i < lines.length; i++) {
                const currentLine = lines[i].trim();

                // If it's empty, keep going to skip blank lines.
                if (!currentLine) {
                  continue;
                }

                // If it starts with "###", we've reached the next heading—stop and return null (no answer).
                if (currentLine.startsWith("###")) {
                  return null;
                }

                // Otherwise, this line should be our answer. Return it, stripped of whitespace.
                return currentLine;
              }

              // If we run out of lines, we didn’t find any valid answer.
              return null;
            }

            // Extract label values
            const deviceValue = extractHeadingValue(lines, /^### Device/);

            let newDeviceLabel = null;
            if (deviceValue) {
              const lowerDevice = deviceValue.toLowerCase();

              // Example logic: if the line includes "steam deck", label as "device:steamdeck"
              if (lowerDevice.includes("steam deck")) {
                newDeviceLabel = "device:steamdeck";
              } 
              else if (lowerDevice.includes("ally")) {
                newDeviceLabel = "device:rogally";
              }
            }

            // Remove any old "device:*" labels that don't match the new label
            const existingLabelNames = issue.labels.map((label) => label.name);
            const deviceLabelsToRemove = existingLabelNames.filter((name) => name.startsWith("device:") && name !== newDeviceLabel);

            for (const labelName of deviceLabelsToRemove) {
              console.log(`Removing old device label: ${labelName}`);
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                name: labelName,
              });
            }

            // If we have a newDeviceLabel and it's not already on the issue, add it
            if (newDeviceLabel && !existingLabelNames.includes(newDeviceLabel)) {
              console.log(`Adding device label: ${newDeviceLabel}`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: [newDeviceLabel],
              });
            } else if (!newDeviceLabel) {
              console.log("No matching device label found or specified in issue text. Not adding any device label.");
            } else {
              console.log(`Device label "${newDeviceLabel}" already present on issue #${issue.number}.`);
            }

  check-report-for-missing-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: "Check report for missing data"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredSections = [
              { heading: "Game Name", minLength: 2 },
              { heading: "Launcher", minLength: 3 },
              { heading: "Deck Compatibility", minLength: 1 },
              { heading: "Target Framerate", minLength: 1 },
              { heading: "Device", minLength: 1 },
              { heading: "SteamOS Version", minLength: 1 },
              { heading: "Undervolt Applied", minLength: 1 },
              { heading: "Steam Play Compatibility Tool Used", minLength: 1 },
              { heading: "Compatibility Tool Version", minLength: 1 },
              { heading: "Custom Launch Options", minLength: 1 },
              { heading: "Frame Limit", minLength: 1 },
              { heading: "Allow Tearing", minLength: 1 },
              { heading: "Half Rate Shading", minLength: 1 },
              { heading: "TDP Limit", minLength: 1 },
              { heading: "Manual GPU Clock", minLength: 1 },
              { heading: "Scaling Mode", minLength: 1 },
              { heading: "Scaling Filter", minLength: 1 },
              { heading: "Game Display Settings", minLength: 1 },
              { heading: "Game Graphics Settings", minLength: 1 },
              { heading: "Additional Notes", minLength: 1 },
            ];

            function extractHeadingValue(lines, heading) {
              const headingToFind = `### ${heading}`.toLowerCase();
              const headingIndex = lines.findIndex(
                (line) => line.trim().toLowerCase() === headingToFind
              );
              if (headingIndex === -1) return null;

              for (let i = headingIndex + 1; i < lines.length; i++) {
                const currentLine = lines[i].trim();

                if (currentLine.toLowerCase().startsWith("### ")) {
                  return null;
                }
                if (!currentLine) {
                  continue;
                }
                return currentLine;
              }
              return null;
            }

            async function processIssue(issue, body) {
              const lines = body.split(/\r?\n/);

              // Validate each required section
              const errors = [];
              for (const section of requiredSections) {
                const extractedValue = extractHeadingValue(lines, section.heading);

                if (extractedValue === null) {
                  console.error(`❌ Missing or empty section for: "${section.heading}"`);
                  errors.push(`${section.heading}`);
                } else if (extractedValue.length < section.minLength) {
                  console.error(
                    `❌ Section "${section.heading}" is too short or not valid. Found: "${extractedValue}"`
                  );
                  errors.push(`${section.heading}`);
                } else {
                  console.log(`✔ "${section.heading}" OK: "${extractedValue}"`);
                }
              }

              const incompleteLabel = "invalid:template-incomplete";

              // If there are errors, either label/comment or skip if already labeled
              if (errors.length > 0) {
                // Check if this issue already has the "invalid:template-incomplete" label
                const existingLabels = issue.labels.map((label) => label.name);
                const hasLabel = existingLabels.includes(incompleteLabel);

                if (!hasLabel) {
                  // Build a message for the comment
                  let commentBodyLines = [
                    "**Validation Failed:** Some required sections are missing or incomplete.",
                    "",
                    "Below are the sections that need attention:",
                  ];
                  for (const heading of errors) {
                    commentBodyLines.push(`- Add/Update *${heading}* header`);
                    commentBodyLines.push("```");
                    commentBodyLines.push(`### ${heading}`);
                    commentBodyLines.push(`<${heading} data here>`);
                    commentBodyLines.push("```");
                    commentBodyLines.push("");
                  }
                  commentBodyLines.push(
                    "Please edit the issue body adding in all required sections."
                  );
                  const commentBody = commentBodyLines.join("\n");

                  // Add the "invalid:template-incomplete" label
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: [incompleteLabel],
                  });

                  // Post a comment with details
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: commentBody,
                  });
                } else {
                  console.log(
                    `Issue #${issue.number} already labeled "${incompleteLabel}". Skipping comment.`
                  );
                }
              } else {
                // If no errors, remove the "invalid:template-incomplete" if it exists
                console.log("All required sections are present and valid!");

                const existingLabels = issue.labels.map((l) => l.name);
                if (existingLabels.includes(incompleteLabel)) {
                  // remove label
                  // note: we must get the label's "node_id" or name to remove it by name
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: incompleteLabel,
                  });
                  console.log(
                    `Removed label "${incompleteLabel}" from Issue #${issue.number}.`
                  );
                }
              }
            }

            const issue = context.payload.issue
            // Skip PRs or any issue that doesn't have a body
            if (issue.pull_request) process.exit(0);
            if (!issue.body) process.exit(0);

            await processIssue(issue, issue.body);
